apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  namespace: recruitment-app
type: Opaque
data:
  # POSTGRES creds are for the app's own user, if different from main postgres user
  POSTGRES_USER: YXBwX3VzZXI= # "app_user" base64 encoded (taken from backend env in Dockercompose)
  POSTGRES_PASSWORD: YQ== # "a" base64 encoded (taken from backend env in Dockercompose)
  # ai_url is now AI_SERVICE_URL
  GEMINI_API_KEY: QUl6YVN5RHA4bl9BbVlzc3BBREpCYU5wa0p2QmRsY2gxLTl2a2h3 # From backend env, though AI service should use its own
  LOGFIRE_TOKEN: cHlsZl92MV91c182NTlyMzJIeDBDV1NicEpGTEw2UjB4aHdtM04xWGp4cTk5RHFZU0pCcFFXTg== # From backend env
  SMTP_PASSWORD: ZHFmcCBheGFyIHNvemQgcWtwcw== # "dqfp axar sozd qkps" base64 encoded
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-configmap
  namespace: recruitment-app
data:
  POSTGRES_DB: "matching_db"
  # IMPORTANT: Use the Kubernetes service name for Postgres
  POSTGRES_HOST: "postgres-db-service.recruitment-app.svc.cluster.local"
  POSTGRES_PORT: "5432" # Postgres internal port
  POSTGRES_HOST_AUTH_METHOD: "trust" # Review if 'trust' is appropriate for K8s. SCRAM-SHA-256 is better.
                                     # If changing, ensure Postgres is configured to support it.
  # IMPORTANT: Use the Kubernetes service name for AI service
  AI_SERVICE_URL: "http://ai-service.recruitment-app.svc.cluster.local:8011"

  SMTP_HOST: "smtp.gmail.com"
  SMTP_PORT: "587"
  SMTP_USERNAME: "charbeldaher34@gmail.com"
  FROM_EMAIL: "charbeldaher34@gmail.com"

  OTP_EXPIRE_MINUTES: "10"
  OTP_LENGTH: "6"

  DEBUG_MODE: "False" # For production
  ENABLE_BATCH_SCHEDULER: "True"
  RESUME_PARSER_INTERVAL_MINUTES: "10"
  APPLICATION_MATCHER_INTERVAL_MINUTES: "10"
  # TZ: "UTC" # Example, if you need to set a specific timezone
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: recruitment-app
  labels:
    app: backend-service
spec:
  replicas: 1 # Adjust as needed, consider HPA
  selector:
    matchLabels:
      app: backend-service
  template:
    metadata:
      labels:
        app: backend-service
    spec:
      containers:
        - name: backend-container
          image: backend-image # IMPORTANT: Replace with your actual built image name/tag
          # If using a private registry, add imagePullSecrets
          ports:
            - containerPort: 8017
          envFrom:
            - configMapRef:
                name: backend-configmap
            - secretRef:
                name: backend-secret
          # No volume mounts for ./backend/app/static were explicitly defined as critical
          # If these static files are built into the image, no mount is needed.
          livenessProbe:
            httpGet:
              path: / # Root endpoint, check if it's suitable for liveness
              port: 8017
            initialDelaySeconds: 45 # Give time for DB connection and app start
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: / # Root endpoint, or a dedicated /healthz
              port: 8017
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service # This is the service name the frontend will use
  namespace: recruitment-app
spec:
  ports:
    - port: 8017 # Port the service listens on (ClusterIP internal)
      targetPort: 8017 # Port on the pod
  selector:
    app: backend-service
  type: ClusterIP # Internal service, accessed by frontend or Ingress
# HorizontalPodAutoscaler (Optional)
# ---
# apiVersion: autoscaling/v2
# kind: HorizontalPodAutoscaler
# metadata:
#   name: backend-hpa
#   namespace: recruitment-app
# spec:
#   scaleTargetRef:
#     apiVersion: apps/v1
#     kind: Deployment
#     name: backend-deployment
#   minReplicas: 1
#   maxReplicas: 3
#   metrics:
#   - type: Resource
#     resource:
#       name: cpu
#       target:
#         type: Utilization
#         averageUtilization: 80
#   - type: Resource
#     resource:
#       name: memory
#       target:
#         type: Utilization
#         averageUtilization: 80
