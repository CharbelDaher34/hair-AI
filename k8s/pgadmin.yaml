apiVersion: v1
kind: Secret
metadata:
  name: pgadmin-secret
  namespace: recruitment-app
type: Opaque
data:
  PGADMIN_DEFAULT_EMAIL: Y2hhcmJlbGRhaGVyMzRAZ21haWwuY29t # "charbeldaher34@gmail.com" base64 encoded
  PGADMIN_DEFAULT_PASSWORD: Y2hhcmJlbA== # "charbel" base64 encoded
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgadmin-pvc
  namespace: recruitment-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi # Adjust size as needed
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
  namespace: recruitment-app
  labels:
    app: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
        - name: pgadmin
          image: dpage/pgadmin4
          ports:
            - containerPort: 80
          env:
            - name: PGADMIN_DEFAULT_EMAIL
              valueFrom:
                secretKeyRef:
                  name: pgadmin-secret
                  key: PGADMIN_DEFAULT_EMAIL
            - name: PGADMIN_DEFAULT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgadmin-secret
                  key: PGADMIN_DEFAULT_PASSWORD
            - name: PGADMIN_LISTEN_PORT # Ensure pgAdmin listens on port 80
              value: "80"
          volumeMounts:
            - name: pgadmin-data
              mountPath: /var/lib/pgadmin
          livenessProbe:
            httpGet:
              path: /misc/ping # pgAdmin's health check endpoint
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /misc/ping
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: pgadmin-data
          persistentVolumeClaim:
            claimName: pgadmin-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin-service
  namespace: recruitment-app
spec:
  ports:
    - port: 8888 # External port (as in Docker Compose)
      targetPort: 80 # pgAdmin container port
      # nodePort: 30001 # Optional: if type is NodePort
  selector:
    app: pgadmin
  type: LoadBalancer # Or NodePort, or ClusterIP if accessed via Ingress
# Consider Ingress for pgAdmin for more sophisticated routing and TLS
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: pgadmin-ingress
#   namespace: recruitment-app
#   annotations:
#     # Add relevant ingress controller annotations
#     # nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
#   rules:
#   - http:
#       paths:
#       - path: /pgadmin
#         pathType: Prefix
#         backend:
#           service:
#             name: pgadmin-service
#             port:
#               number: 80
# N.B. pgAdmin might need specific configurations to run under a subpath like /pgadmin
# For simplicity, LoadBalancer or NodePort is often easier if subpath routing is complex.
