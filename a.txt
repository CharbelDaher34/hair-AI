ALTER TABLE hr FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS hr_rls ON hr;
CREATE POLICY hr_rls ON hr
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   JOB TABLE
-------------------------------------------------------------------*/
ALTER TABLE job ENABLE ROW LEVEL SECURITY;
ALTER TABLE job FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS job_rls ON job;
CREATE POLICY job_rls ON job
    FOR ALL TO public
    USING (
        employer_id = current_setting('multi_tenancy.current_company_id', true)::int OR
        recruited_to_id = current_setting('multi_tenancy.current_company_id', true)::int
    );

/* ------------------------------------------------------------------
   CANDIDATE TABLE
-------------------------------------------------------------------*/
ALTER TABLE candidate ENABLE ROW LEVEL SECURITY;
ALTER TABLE candidate FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS candidate_rls ON candidate;
CREATE POLICY candidate_rls ON candidate
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   APPLICATION TABLE
-------------------------------------------------------------------*/
ALTER TABLE application ENABLE ROW LEVEL SECURITY;
ALTER TABLE application FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS application_rls ON application;
CREATE POLICY application_rls ON application
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM candidate c
            WHERE c.id = application.candidate_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

/* ------------------------------------------------------------------
   INTERVIEW TABLE
-------------------------------------------------------------------*/
ALTER TABLE interview ENABLE ROW LEVEL SECURITY;
ALTER TABLE interview FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS interview_rls ON interview;
CREATE POLICY interview_rls ON interview
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM application a
            JOIN candidate c ON c.id = a.candidate_id
            WHERE a.id = interview.application_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

/* ------------------------------------------------------------------
   MATCH TABLE (quoted due to keyword usage)
-------------------------------------------------------------------*/
ALTER TABLE "match" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "match" FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS match_rls ON "match";
CREATE POLICY match_rls ON "match"
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM application a
            JOIN candidate c ON c.id = a.candidate_id
            WHERE a.id = "match".application_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    ); 

/* ------------------------------------------------------------------
   RECRUITERCOMPANYLINK TABLE
-------------------------------------------------------------------*/
ALTER TABLE recruitercompanylink ENABLE ROW LEVEL SECURITY;
ALTER TABLE recruitercompanylink FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS recruitercompanylink_rls ON recruitercompanylink;
CREATE POLICY recruitercompanylink_rls ON recruitercompanylink
    FOR ALL TO public
    USING (
        recruiter_id = current_setting('multi_tenancy.current_company_id', true)::int OR
        target_employer_id = current_setting('multi_tenancy.current_company_id', true)::int
    );

/* ------------------------------------------------------------------
   FORMKEY TABLE
-------------------------------------------------------------------*/
ALTER TABLE formkey ENABLE ROW LEVEL SECURITY;
ALTER TABLE formkey FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS formkey_rls ON formkey;
CREATE POLICY formkey_rls ON formkey
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   JOBFORMKEYCONSTRAINT TABLE
-------------------------------------------------------------------*/
ALTER TABLE jobformkeyconstraint ENABLE ROW LEVEL SECURITY;
ALTER TABLE jobformkeyconstraint FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS jobformkeyconstraint_rls ON jobformkeyconstraint;
CREATE POLICY jobformkeyconstraint_rls ON jobformkeyconstraint
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM job j
            WHERE j.id = jobformkeyconstraint.job_id
              AND j.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

-- Company table
ALTER TABLE company ENABLE ROW LEVEL SECURITY;
ALTER TABLE company FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS company_rls ON company;
CREATE POLICY company_rls ON company
    FOR ALL TO public
    USING (id = current_setting('multi_tenancy.current_company_id', true)::int);]
(Background on this error at: https://sqlalche.me/e/20/2j85)
postgresql://app_user:a@84.16.230.94:5437/matching_db
Creating database tables...
Error creating database tables: (psycopg2.errors.DependentObjectsStillExist) role "app_user" cannot be dropped because some objects depend on it
DETAIL:  privileges for default privileges on new relations belonging to role charbel in schema public
privileges for default privileges on new sequences belonging to role charbel in schema public
privileges for sequence company_id_seq
privileges for table company
privileges for sequence hr_id_seq
privileges for table hr
privileges for sequence recruitercompanylink_id_seq
privileges for table recruitercompanylink
privileges for sequence formkey_id_seq
privileges for table formkey
privileges for sequence candidate_id_seq
privileges for table candidate
privileges for sequence job_id_seq
privileges for table job
privileges for sequence jobformkeyconstraint_id_seq
privileges for table jobformkeyconstraint
privileges for sequence application_id_seq
privileges for table application
privileges for sequence interview_id_seq
privileges for table interview
privileges for sequence match_id_seq
privileges for table match

[SQL: -- Create user
DROP USER IF EXISTS app_user ;
CREATE USER app_user WITH LOGIN PASSWORD 'a';
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO app_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT USAGE, SELECT ON SEQUENCES TO app_user;


--create schema for row level security
CREATE SCHEMA IF NOT EXISTS multi_tenancy;

/* ------------------------------------------------------------------
   HR TABLE
-------------------------------------------------------------------*/
ALTER TABLE hr ENABLE ROW LEVEL SECURITY;
ALTER TABLE hr FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS hr_rls ON hr;
CREATE POLICY hr_rls ON hr
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   JOB TABLE
-------------------------------------------------------------------*/
ALTER TABLE job ENABLE ROW LEVEL SECURITY;
ALTER TABLE job FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS job_rls ON job;
CREATE POLICY job_rls ON job
    FOR ALL TO public
    USING (
        employer_id = current_setting('multi_tenancy.current_company_id', true)::int OR
        recruited_to_id = current_setting('multi_tenancy.current_company_id', true)::int
    );

/* ------------------------------------------------------------------
   CANDIDATE TABLE
-------------------------------------------------------------------*/
ALTER TABLE candidate ENABLE ROW LEVEL SECURITY;
ALTER TABLE candidate FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS candidate_rls ON candidate;
CREATE POLICY candidate_rls ON candidate
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   APPLICATION TABLE
-------------------------------------------------------------------*/
ALTER TABLE application ENABLE ROW LEVEL SECURITY;
ALTER TABLE application FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS application_rls ON application;
CREATE POLICY application_rls ON application
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM candidate c
            WHERE c.id = application.candidate_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

/* ------------------------------------------------------------------
   INTERVIEW TABLE
-------------------------------------------------------------------*/
ALTER TABLE interview ENABLE ROW LEVEL SECURITY;
ALTER TABLE interview FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS interview_rls ON interview;
CREATE POLICY interview_rls ON interview
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM application a
            JOIN candidate c ON c.id = a.candidate_id
            WHERE a.id = interview.application_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

/* ------------------------------------------------------------------
   MATCH TABLE (quoted due to keyword usage)
-------------------------------------------------------------------*/
ALTER TABLE "match" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "match" FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS match_rls ON "match";
CREATE POLICY match_rls ON "match"
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM application a
            JOIN candidate c ON c.id = a.candidate_id
            WHERE a.id = "match".application_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    ); 

/* ------------------------------------------------------------------
   RECRUITERCOMPANYLINK TABLE
-------------------------------------------------------------------*/
ALTER TABLE recruitercompanylink ENABLE ROW LEVEL SECURITY;
ALTER TABLE recruitercompanylink FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS recruitercompanylink_rls ON recruitercompanylink;
CREATE POLICY recruitercompanylink_rls ON recruitercompanylink
    FOR ALL TO public
    USING (
        recruiter_id = current_setting('multi_tenancy.current_company_id', true)::int OR
        target_employer_id = current_setting('multi_tenancy.current_company_id', true)::int
    );

/* ------------------------------------------------------------------
   FORMKEY TABLE
-------------------------------------------------------------------*/
ALTER TABLE formkey ENABLE ROW LEVEL SECURITY;
ALTER TABLE formkey FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS formkey_rls ON formkey;
CREATE POLICY formkey_rls ON formkey
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   JOBFORMKEYCONSTRAINT TABLE
-------------------------------------------------------------------*/
ALTER TABLE jobformkeyconstraint ENABLE ROW LEVEL SECURITY;
ALTER TABLE jobformkeyconstraint FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS jobformkeyconstraint_rls ON jobformkeyconstraint;
CREATE POLICY jobformkeyconstraint_rls ON jobformkeyconstraint
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM job j
            WHERE j.id = jobformkeyconstraint.job_id
              AND j.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

-- Company table
ALTER TABLE company ENABLE ROW LEVEL SECURITY;
ALTER TABLE company FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS company_rls ON company;
CREATE POLICY company_rls ON company
    FOR ALL TO public
    USING (id = current_setting('multi_tenancy.current_company_id', true)::int);]
(Background on this error at: https://sqlalche.me/e/20/2j85)
postgresql://app_user:a@84.16.230.94:5437/matching_db
Creating database tables...
Error creating database tables: (psycopg2.errors.DependentObjectsStillExist) role "app_user" cannot be dropped because some objects depend on it
DETAIL:  privileges for default privileges on new relations belonging to role charbel in schema public
privileges for default privileges on new sequences belonging to role charbel in schema public
privileges for sequence company_id_seq
privileges for table company
privileges for sequence hr_id_seq
privileges for table hr
privileges for sequence recruitercompanylink_id_seq
privileges for table recruitercompanylink
privileges for sequence formkey_id_seq
privileges for table formkey
privileges for sequence candidate_id_seq
privileges for table candidate
privileges for sequence job_id_seq
privileges for table job
privileges for sequence jobformkeyconstraint_id_seq
privileges for table jobformkeyconstraint
privileges for sequence application_id_seq
privileges for table application
privileges for sequence interview_id_seq
privileges for table interview
privileges for sequence match_id_seq
privileges for table match

[SQL: -- Create user
DROP USER IF EXISTS app_user ;
CREATE USER app_user WITH LOGIN PASSWORD 'a';
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO app_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT USAGE, SELECT ON SEQUENCES TO app_user;


--create schema for row level security
CREATE SCHEMA IF NOT EXISTS multi_tenancy;

/* ------------------------------------------------------------------
   HR TABLE
-------------------------------------------------------------------*/
ALTER TABLE hr ENABLE ROW LEVEL SECURITY;
ALTER TABLE hr FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS hr_rls ON hr;
CREATE POLICY hr_rls ON hr
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   JOB TABLE
-------------------------------------------------------------------*/
ALTER TABLE job ENABLE ROW LEVEL SECURITY;
ALTER TABLE job FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS job_rls ON job;
CREATE POLICY job_rls ON job
    FOR ALL TO public
    USING (
        employer_id = current_setting('multi_tenancy.current_company_id', true)::int OR
        recruited_to_id = current_setting('multi_tenancy.current_company_id', true)::int
    );

/* ------------------------------------------------------------------
   CANDIDATE TABLE
-------------------------------------------------------------------*/
ALTER TABLE candidate ENABLE ROW LEVEL SECURITY;
ALTER TABLE candidate FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS candidate_rls ON candidate;
CREATE POLICY candidate_rls ON candidate
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   APPLICATION TABLE
-------------------------------------------------------------------*/
ALTER TABLE application ENABLE ROW LEVEL SECURITY;
ALTER TABLE application FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS application_rls ON application;
CREATE POLICY application_rls ON application
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM candidate c
            WHERE c.id = application.candidate_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

/* ------------------------------------------------------------------
   INTERVIEW TABLE
-------------------------------------------------------------------*/
ALTER TABLE interview ENABLE ROW LEVEL SECURITY;
ALTER TABLE interview FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS interview_rls ON interview;
CREATE POLICY interview_rls ON interview
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM application a
            JOIN candidate c ON c.id = a.candidate_id
            WHERE a.id = interview.application_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

/* ------------------------------------------------------------------
   MATCH TABLE (quoted due to keyword usage)
-------------------------------------------------------------------*/
ALTER TABLE "match" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "match" FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS match_rls ON "match";
CREATE POLICY match_rls ON "match"
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM application a
            JOIN candidate c ON c.id = a.candidate_id
            WHERE a.id = "match".application_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    ); 

/* ------------------------------------------------------------------
   RECRUITERCOMPANYLINK TABLE
-------------------------------------------------------------------*/
ALTER TABLE recruitercompanylink ENABLE ROW LEVEL SECURITY;
ALTER TABLE recruitercompanylink FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS recruitercompanylink_rls ON recruitercompanylink;
CREATE POLICY recruitercompanylink_rls ON recruitercompanylink
    FOR ALL TO public
    USING (
        recruiter_id = current_setting('multi_tenancy.current_company_id', true)::int OR
        target_employer_id = current_setting('multi_tenancy.current_company_id', true)::int
    );

/* ------------------------------------------------------------------
   FORMKEY TABLE
-------------------------------------------------------------------*/
ALTER TABLE formkey ENABLE ROW LEVEL SECURITY;
ALTER TABLE formkey FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS formkey_rls ON formkey;
CREATE POLICY formkey_rls ON formkey
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   JOBFORMKEYCONSTRAINT TABLE
-------------------------------------------------------------------*/
ALTER TABLE jobformkeyconstraint ENABLE ROW LEVEL SECURITY;
ALTER TABLE jobformkeyconstraint FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS jobformkeyconstraint_rls ON jobformkeyconstraint;
CREATE POLICY jobformkeyconstraint_rls ON jobformkeyconstraint
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM job j
            WHERE j.id = jobformkeyconstraint.job_id
              AND j.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

-- Company table
ALTER TABLE company ENABLE ROW LEVEL SECURITY;
ALTER TABLE company FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS company_rls ON company;
CREATE POLICY company_rls ON company
    FOR ALL TO public
    USING (id = current_setting('multi_tenancy.current_company_id', true)::int);]
(Background on this error at: https://sqlalche.me/e/20/2j85)
postgresql://app_user:a@84.16.230.94:5437/matching_db
Creating database tables...
Error creating database tables: (psycopg2.errors.DependentObjectsStillExist) role "app_user" cannot be dropped because some objects depend on it
DETAIL:  privileges for default privileges on new relations belonging to role charbel in schema public
privileges for default privileges on new sequences belonging to role charbel in schema public
privileges for sequence company_id_seq
privileges for table company
privileges for sequence hr_id_seq
privileges for table hr
privileges for sequence recruitercompanylink_id_seq
privileges for table recruitercompanylink
privileges for sequence formkey_id_seq
privileges for table formkey
privileges for sequence candidate_id_seq
privileges for table candidate
privileges for sequence job_id_seq
privileges for table job
privileges for sequence jobformkeyconstraint_id_seq
privileges for table jobformkeyconstraint
privileges for sequence application_id_seq
privileges for table application
privileges for sequence interview_id_seq
privileges for table interview
privileges for sequence match_id_seq
privileges for table match

[SQL: -- Create user
DROP USER IF EXISTS app_user ;
CREATE USER app_user WITH LOGIN PASSWORD 'a';
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO app_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT USAGE, SELECT ON SEQUENCES TO app_user;


--create schema for row level security
CREATE SCHEMA IF NOT EXISTS multi_tenancy;

/* ------------------------------------------------------------------
   HR TABLE
-------------------------------------------------------------------*/
ALTER TABLE hr ENABLE ROW LEVEL SECURITY;
ALTER TABLE hr FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS hr_rls ON hr;
CREATE POLICY hr_rls ON hr
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   JOB TABLE
-------------------------------------------------------------------*/
ALTER TABLE job ENABLE ROW LEVEL SECURITY;
ALTER TABLE job FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS job_rls ON job;
CREATE POLICY job_rls ON job
    FOR ALL TO public
    USING (
        employer_id = current_setting('multi_tenancy.current_company_id', true)::int OR
        recruited_to_id = current_setting('multi_tenancy.current_company_id', true)::int
    );

/* ------------------------------------------------------------------
   CANDIDATE TABLE
-------------------------------------------------------------------*/
ALTER TABLE candidate ENABLE ROW LEVEL SECURITY;
ALTER TABLE candidate FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS candidate_rls ON candidate;
CREATE POLICY candidate_rls ON candidate
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   APPLICATION TABLE
-------------------------------------------------------------------*/
ALTER TABLE application ENABLE ROW LEVEL SECURITY;
ALTER TABLE application FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS application_rls ON application;
CREATE POLICY application_rls ON application
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM candidate c
            WHERE c.id = application.candidate_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

/* ------------------------------------------------------------------
   INTERVIEW TABLE
-------------------------------------------------------------------*/
ALTER TABLE interview ENABLE ROW LEVEL SECURITY;
ALTER TABLE interview FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS interview_rls ON interview;
CREATE POLICY interview_rls ON interview
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM application a
            JOIN candidate c ON c.id = a.candidate_id
            WHERE a.id = interview.application_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

/* ------------------------------------------------------------------
   MATCH TABLE (quoted due to keyword usage)
-------------------------------------------------------------------*/
ALTER TABLE "match" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "match" FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS match_rls ON "match";
CREATE POLICY match_rls ON "match"
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM application a
            JOIN candidate c ON c.id = a.candidate_id
            WHERE a.id = "match".application_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    ); 

/* ------------------------------------------------------------------
   RECRUITERCOMPANYLINK TABLE
-------------------------------------------------------------------*/
ALTER TABLE recruitercompanylink ENABLE ROW LEVEL SECURITY;
ALTER TABLE recruitercompanylink FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS recruitercompanylink_rls ON recruitercompanylink;
CREATE POLICY recruitercompanylink_rls ON recruitercompanylink
    FOR ALL TO public
    USING (
        recruiter_id = current_setting('multi_tenancy.current_company_id', true)::int OR
        target_employer_id = current_setting('multi_tenancy.current_company_id', true)::int
    );

/* ------------------------------------------------------------------
   FORMKEY TABLE
-------------------------------------------------------------------*/
ALTER TABLE formkey ENABLE ROW LEVEL SECURITY;
ALTER TABLE formkey FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS formkey_rls ON formkey;
CREATE POLICY formkey_rls ON formkey
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   JOBFORMKEYCONSTRAINT TABLE
-------------------------------------------------------------------*/
ALTER TABLE jobformkeyconstraint ENABLE ROW LEVEL SECURITY;
ALTER TABLE jobformkeyconstraint FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS jobformkeyconstraint_rls ON jobformkeyconstraint;
CREATE POLICY jobformkeyconstraint_rls ON jobformkeyconstraint
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM job j
            WHERE j.id = jobformkeyconstraint.job_id
              AND j.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

-- Company table
ALTER TABLE company ENABLE ROW LEVEL SECURITY;
ALTER TABLE company FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS company_rls ON company;
CREATE POLICY company_rls ON company
    FOR ALL TO public
    USING (id = current_setting('multi_tenancy.current_company_id', true)::int);]
(Background on this error at: https://sqlalche.me/e/20/2j85)
postgresql://app_user:a@84.16.230.94:5437/matching_db
Creating database tables...
Error creating database tables: (psycopg2.errors.DependentObjectsStillExist) role "app_user" cannot be dropped because some objects depend on it
DETAIL:  privileges for default privileges on new relations belonging to role charbel in schema public
privileges for default privileges on new sequences belonging to role charbel in schema public
privileges for sequence company_id_seq
privileges for table company
privileges for sequence hr_id_seq
privileges for table hr
privileges for sequence recruitercompanylink_id_seq
privileges for table recruitercompanylink
privileges for sequence formkey_id_seq
privileges for table formkey
privileges for sequence candidate_id_seq
privileges for table candidate
privileges for sequence job_id_seq
privileges for table job
privileges for sequence jobformkeyconstraint_id_seq
privileges for table jobformkeyconstraint
privileges for sequence application_id_seq
privileges for table application
privileges for sequence interview_id_seq
privileges for table interview
privileges for sequence match_id_seq
privileges for table match

[SQL: -- Create user
DROP USER IF EXISTS app_user ;
CREATE USER app_user WITH LOGIN PASSWORD 'a';
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO app_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT USAGE, SELECT ON SEQUENCES TO app_user;


--create schema for row level security
CREATE SCHEMA IF NOT EXISTS multi_tenancy;

/* ------------------------------------------------------------------
   HR TABLE
-------------------------------------------------------------------*/
ALTER TABLE hr ENABLE ROW LEVEL SECURITY;
ALTER TABLE hr FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS hr_rls ON hr;
CREATE POLICY hr_rls ON hr
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   JOB TABLE
-------------------------------------------------------------------*/
ALTER TABLE job ENABLE ROW LEVEL SECURITY;
ALTER TABLE job FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS job_rls ON job;
CREATE POLICY job_rls ON job
    FOR ALL TO public
    USING (
        employer_id = current_setting('multi_tenancy.current_company_id', true)::int OR
        recruited_to_id = current_setting('multi_tenancy.current_company_id', true)::int
    );

/* ------------------------------------------------------------------
   CANDIDATE TABLE
-------------------------------------------------------------------*/
ALTER TABLE candidate ENABLE ROW LEVEL SECURITY;
ALTER TABLE candidate FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS candidate_rls ON candidate;
CREATE POLICY candidate_rls ON candidate
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   APPLICATION TABLE
-------------------------------------------------------------------*/
ALTER TABLE application ENABLE ROW LEVEL SECURITY;
ALTER TABLE application FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS application_rls ON application;
CREATE POLICY application_rls ON application
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM candidate c
            WHERE c.id = application.candidate_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

/* ------------------------------------------------------------------
   INTERVIEW TABLE
-------------------------------------------------------------------*/
ALTER TABLE interview ENABLE ROW LEVEL SECURITY;
ALTER TABLE interview FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS interview_rls ON interview;
CREATE POLICY interview_rls ON interview
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM application a
            JOIN candidate c ON c.id = a.candidate_id
            WHERE a.id = interview.application_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

/* ------------------------------------------------------------------
   MATCH TABLE (quoted due to keyword usage)
-------------------------------------------------------------------*/
ALTER TABLE "match" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "match" FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS match_rls ON "match";
CREATE POLICY match_rls ON "match"
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM application a
            JOIN candidate c ON c.id = a.candidate_id
            WHERE a.id = "match".application_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    ); 

/* ------------------------------------------------------------------
   RECRUITERCOMPANYLINK TABLE
-------------------------------------------------------------------*/
ALTER TABLE recruitercompanylink ENABLE ROW LEVEL SECURITY;
ALTER TABLE recruitercompanylink FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS recruitercompanylink_rls ON recruitercompanylink;
CREATE POLICY recruitercompanylink_rls ON recruitercompanylink
    FOR ALL TO public
    USING (
        recruiter_id = current_setting('multi_tenancy.current_company_id', true)::int OR
        target_employer_id = current_setting('multi_tenancy.current_company_id', true)::int
    );

/* ------------------------------------------------------------------
   FORMKEY TABLE
-------------------------------------------------------------------*/
ALTER TABLE formkey ENABLE ROW LEVEL SECURITY;
ALTER TABLE formkey FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS formkey_rls ON formkey;
CREATE POLICY formkey_rls ON formkey
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   JOBFORMKEYCONSTRAINT TABLE
-------------------------------------------------------------------*/
ALTER TABLE jobformkeyconstraint ENABLE ROW LEVEL SECURITY;
ALTER TABLE jobformkeyconstraint FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS jobformkeyconstraint_rls ON jobformkeyconstraint;
CREATE POLICY jobformkeyconstraint_rls ON jobformkeyconstraint
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM job j
            WHERE j.id = jobformkeyconstraint.job_id
              AND j.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

-- Company table
ALTER TABLE company ENABLE ROW LEVEL SECURITY;
ALTER TABLE company FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS company_rls ON company;
CREATE POLICY company_rls ON company
    FOR ALL TO public
    USING (id = current_setting('multi_tenancy.current_company_id', true)::int);]
(Background on this error at: https://sqlalche.me/e/20/2j85)
postgresql://app_user:a@84.16.230.94:5437/matching_db
Creating database tables...
Error creating database tables: (psycopg2.errors.DependentObjectsStillExist) role "app_user" cannot be dropped because some objects depend on it
DETAIL:  privileges for default privileges on new relations belonging to role charbel in schema public
privileges for default privileges on new sequences belonging to role charbel in schema public
privileges for sequence company_id_seq
privileges for table company
privileges for sequence hr_id_seq
privileges for table hr
privileges for sequence recruitercompanylink_id_seq
privileges for table recruitercompanylink
privileges for sequence formkey_id_seq
privileges for table formkey
privileges for sequence candidate_id_seq
privileges for table candidate
privileges for sequence job_id_seq
privileges for table job
privileges for sequence jobformkeyconstraint_id_seq
privileges for table jobformkeyconstraint
privileges for sequence application_id_seq
privileges for table application
privileges for sequence interview_id_seq
privileges for table interview
privileges for sequence match_id_seq
privileges for table match

[SQL: -- Create user
DROP USER IF EXISTS app_user ;
CREATE USER app_user WITH LOGIN PASSWORD 'a';
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO app_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT USAGE, SELECT ON SEQUENCES TO app_user;


--create schema for row level security
CREATE SCHEMA IF NOT EXISTS multi_tenancy;

/* ------------------------------------------------------------------
   HR TABLE
-------------------------------------------------------------------*/
ALTER TABLE hr ENABLE ROW LEVEL SECURITY;
ALTER TABLE hr FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS hr_rls ON hr;
CREATE POLICY hr_rls ON hr
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   JOB TABLE
-------------------------------------------------------------------*/
ALTER TABLE job ENABLE ROW LEVEL SECURITY;
ALTER TABLE job FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS job_rls ON job;
CREATE POLICY job_rls ON job
    FOR ALL TO public
    USING (
        employer_id = current_setting('multi_tenancy.current_company_id', true)::int OR
        recruited_to_id = current_setting('multi_tenancy.current_company_id', true)::int
    );

/* ------------------------------------------------------------------
   CANDIDATE TABLE
-------------------------------------------------------------------*/
ALTER TABLE candidate ENABLE ROW LEVEL SECURITY;
ALTER TABLE candidate FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS candidate_rls ON candidate;
CREATE POLICY candidate_rls ON candidate
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   APPLICATION TABLE
-------------------------------------------------------------------*/
ALTER TABLE application ENABLE ROW LEVEL SECURITY;
ALTER TABLE application FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS application_rls ON application;
CREATE POLICY application_rls ON application
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM candidate c
            WHERE c.id = application.candidate_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

/* ------------------------------------------------------------------
   INTERVIEW TABLE
-------------------------------------------------------------------*/
ALTER TABLE interview ENABLE ROW LEVEL SECURITY;
ALTER TABLE interview FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS interview_rls ON interview;
CREATE POLICY interview_rls ON interview
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM application a
            JOIN candidate c ON c.id = a.candidate_id
            WHERE a.id = interview.application_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

/* ------------------------------------------------------------------
   MATCH TABLE (quoted due to keyword usage)
-------------------------------------------------------------------*/
ALTER TABLE "match" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "match" FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS match_rls ON "match";
CREATE POLICY match_rls ON "match"
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM application a
            JOIN candidate c ON c.id = a.candidate_id
            WHERE a.id = "match".application_id
              AND c.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    ); 

/* ------------------------------------------------------------------
   RECRUITERCOMPANYLINK TABLE
-------------------------------------------------------------------*/
ALTER TABLE recruitercompanylink ENABLE ROW LEVEL SECURITY;
ALTER TABLE recruitercompanylink FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS recruitercompanylink_rls ON recruitercompanylink;
CREATE POLICY recruitercompanylink_rls ON recruitercompanylink
    FOR ALL TO public
    USING (
        recruiter_id = current_setting('multi_tenancy.current_company_id', true)::int OR
        target_employer_id = current_setting('multi_tenancy.current_company_id', true)::int
    );

/* ------------------------------------------------------------------
   FORMKEY TABLE
-------------------------------------------------------------------*/
ALTER TABLE formkey ENABLE ROW LEVEL SECURITY;
ALTER TABLE formkey FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS formkey_rls ON formkey;
CREATE POLICY formkey_rls ON formkey
    FOR ALL TO public
    USING (employer_id = current_setting('multi_tenancy.current_company_id', true)::int);

/* ------------------------------------------------------------------
   JOBFORMKEYCONSTRAINT TABLE
-------------------------------------------------------------------*/
ALTER TABLE jobformkeyconstraint ENABLE ROW LEVEL SECURITY;
ALTER TABLE jobformkeyconstraint FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS jobformkeyconstraint_rls ON jobformkeyconstraint;
CREATE POLICY jobformkeyconstraint_rls ON jobformkeyconstraint
    FOR ALL TO public
    USING (
        EXISTS (
            SELECT 1
            FROM job j
            WHERE j.id = jobformkeyconstraint.job_id
              AND j.employer_id = current_setting('multi_tenancy.current_company_id', true)::int
        )
    );

-- Company table
ALTER TABLE company ENABLE ROW LEVEL SECURITY;
ALTER TABLE company FORCE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS company_rls ON company;
CREATE POLICY company_rls ON company
    FOR ALL TO public
    USING (id = current_setting('multi_tenancy.current_company_id', true)::int);]
(Background on this error at: https://sqlalche.me/e/20/2j85)
